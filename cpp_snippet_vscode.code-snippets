{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Standard template for cpp":{
		"scope": "cpp, c, c++",
		"prefix": "solve",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long",
			"#define pb push_back",
			"#define mp make_pair",
			"#define pii make_pair<int, int>" ,
			"#define fast_input cin.tie(NULL); ios_base::sync_with_stdio(false)",
			"const int mod = 1e9+7;",
			"",
			"int main(){",
			"\tfast_input;",
			"",
			"\tint test; cin >> test;",
			"\twhile(test--){",
			"\t\t$1",			
			"\t}",
			"\treturn 0;",
			"}"
		],
		"description": "template for solving problems"
	}
}
